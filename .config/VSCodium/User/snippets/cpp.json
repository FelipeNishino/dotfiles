{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "headerguard",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"ifndef guard for .hpp files": {
		"prefix": "headerguard",
		"body": [
			"#ifndef $1_H",
			"#define $1_H",
			"",
			"$2",
			"",
			"#endif //$1_H"

		],
		"description": "ifndef guard for .hpp files"
	},
    "Logger debug snippet": {
		"prefix": "ldebug",
		"body": [
			"Logger::log(Logger::LOG_DEBUG, \"$0\");",
		],
		"description": "Log output to cerr/stderr with DEBUG label."
	},
    "Logger info snippet": {
		"prefix": "linfo",
		"body": [
			"Logger::log(Logger::LOG_INFO, \"$0\");",
		],
		"description": "Log output to cerr/stderr with INFO label."
	},
    "Logger warning snippet": {
		"prefix": "lwarning",
		"body": [
			"Logger::log(Logger::LOG_WARNING, \"$0\");",
		],
		"description": "Log output to cerr/stderr with WARNING label."
	},
    "Logger error snippet": {
		"prefix": "lerror",
		"body": [
			"Logger::log(Logger::LOG_ERROR, \"$0\");",
		],
		"description": "Log output to cerr/stderr with ERROR label."
	},
    "Logger fatal snippet": {
		"prefix": "lfatal",
		"body": [
			"Logger::log(Logger::LOG_FATAL, \"$0\");",
		],
		"description": "Log output to cerr/stderr with FATAL label."
	},
}